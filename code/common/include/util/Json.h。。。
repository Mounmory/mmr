#ifndef _JSON_H_
#define _JSON_H_

#include "Common.h"
#include "UtilCommon.h"

#include <cstdint>
#include <cmath>
#include <cctype>
#include <string>
#include <deque>
#include <map>
#include <type_traits>
#include <initializer_list>
#include <ostream>
#include <iostream>


namespace json {

	using std::map;
	using std::deque;
	using std::string;
	using std::enable_if;
	using std::initializer_list;
	using std::is_same;
	using std::is_convertible;
	using std::is_integral;
	using std::is_floating_point;

	class COMMON_CLASS_API JSON
	{

	public:
		//构造函数
		JSON();

		JSON(initializer_list<JSON> list);

		JSON(JSON&& other);

		JSON(const JSON &other);

		template <typename T>
		JSON::JSON(T b, typename enable_if<is_same<T, bool>::value>::type*) : Internal(b), Type(Class::Boolean) {}

		template <typename T>
		JSON::JSON(T i, typename enable_if<is_integral<T>::value && !is_same<T, bool>::value>::type*) : Internal((long)i), Type(Class::Integral) {}

		template <typename T>
		JSON::JSON(T f, typename enable_if<is_floating_point<T>::value>::type*) : Internal((double)f), Type(Class::Floating) {}

		template <typename T>
		JSON::JSON(T s, typename enable_if<is_convertible<T, string>::value>::type*) : Internal(string(s)), Type(Class::String) {}

		JSON(std::nullptr_t);

		~JSON(); 

	public:
		enum class Class {
			Null,
			Object,
			Array,
			String,
			Floating,
			Integral,
			Boolean
		};

		//JSON容器封装
		template <typename Container>
		class JSONWrapper {
		public:
			JSONWrapper(Container *val) : object(val) {}
			JSONWrapper(std::nullptr_t) : object(nullptr) {}

			typename Container::iterator begin() { return object ? object->begin() : typename Container::iterator(); }
			typename Container::iterator end() { return object ? object->end() : typename Container::iterator(); }
			typename Container::const_iterator begin() const { return object ? object->begin() : typename Container::iterator(); }
			typename Container::const_iterator end() const { return object ? object->end() : typename Container::iterator(); }
		private:
			Container *object;
		};

		template <typename Container>
		class JSONConstWrapper {
			const Container *object;

		public:
			JSONConstWrapper(const Container *val) : object(val) {}
			JSONConstWrapper(std::nullptr_t) : object(nullptr) {}

			typename Container::const_iterator begin() const { return object ? object->begin() : typename Container::const_iterator(); }
			typename Container::const_iterator end() const { return object ? object->end() : typename Container::const_iterator(); }
		};

	public:

		JSON& operator=(const JSON &other);

		JSON& operator=(JSON&& other);

		template <typename T>
		typename enable_if<is_same<T, bool>::value, JSON&>::type JSON::operator=(T b)
		{
			SetType(Class::Boolean);
			Internal.Bool = b;
			return *this;
		}

		template <typename T>
		typename enable_if<is_floating_point<T>::value, JSON&>::type JSON::operator=(T f)
		{
			SetType(Class::Floating);
			Internal.Float = f;
			return *this;
		}

		//template <typename T>
		//typename enable_if<is_convertible<T, string>::value, JSON&>::type operator=(T s) {
		//	SetType(Class::String); *Internal.String = string(s); return *this;
		//}

		template <typename T>
		typename enable_if<is_convertible<T, string>::value, JSON&>::type operator=(T s) {
			SetType(Class::String); *Internal.String = string(s); return *this;
		}

		template <typename T>
		typename enable_if<is_integral<T>::value && !is_same<T, bool>::value, JSON&>::type operator=(T i) {
			SetType(Class::Integral); Internal.Int = i; return *this;
		}


		JSON& operator[](const string &key);

		JSON& operator[](unsigned index);

		friend std::ostream& operator<<(std::ostream&, const JSON &);

	public:

		//construct an enpty JSON object
		static JSON Make(Class type);

		//get JSON from json string
		static JSON Load(const string &);

		//output JSON as string
		string dump(int depth = 1, string tab = "  ") const;

		template <typename T>
		void append(T arg);

		template <typename T, typename... U>
		void append(T arg, U... args);

		JSON &at(const string &key);

		const JSON &at(const string &key) const;

		JSON &at(unsigned index);

		const JSON &at(unsigned index) const;

		size_t length() const;

		bool hasKey(const string &key) const;

		size_t size() const;

		Class JSONType() const;

		/// Functions for getting primitives from the JSON object.
		bool IsNull() const;

		string ToString() const;
		string ToString(bool &ok) const;

		double ToFloat() const;
		double ToFloat(bool &ok) const;

		long ToInt() const;
		long ToInt(bool &ok) const;

		bool ToBool() const;
		bool ToBool(bool &ok) const;

		JSONWrapper<map<string, JSON>> ObjectRange();

		JSONWrapper<deque<JSON>> ArrayRange();

		JSONConstWrapper<map<string, JSON>> ObjectRange() const;

		JSONConstWrapper<deque<JSON>> ArrayRange() const;

	private:
		void SetType(Class type);

		void ClearInternal();

	private:

		union BackingData {
			BackingData(double d) : Float(d) {}
			BackingData(long   l) : Int(l) {}
			BackingData(bool   b) : Bool(b) {}
			BackingData(string s) : String(new string(s)) {}
			BackingData() : Int(0) {}

			deque<JSON>        *List;
			map<string, JSON>   *Map;
			string             *String;
			double              Float;
			long                Int;
			bool                Bool;
		};

		BackingData Internal;
		Class Type = Class::Null;
	};

	JSON Array();//构造空数组

	template <typename... T>
	JSON Array(T... args);//初始化构造数组 

	JSON Object();//构造空对象 

	string json_escape(const string &str); //处理转义字符，将转移字符转换为字符串

	void consume_ws(const string &str, size_t &offset);//跳过空格

	JSON parse_object(const string &str, size_t &offset);

	JSON parse_array(const string &str, size_t &offset);

	JSON parse_string(const string &str, size_t &offset);

	JSON parse_number(const string &str, size_t &offset);

	JSON parse_bool(const string &str, size_t &offset);

	JSON parse_null(const string &str, size_t &offset);

	JSON parse_next(const string &str, size_t &offset);

} // End Namespace json

#endif // !_JSON_H_